
// ------------------------- input structure classes ------------------------- //

// basic label/input/error-message wrapper class to ensure formatting
.field {
  display: flex;
  flex-direction: column;
}

// class for components so they are structured like inputs
.input {
  display: block;
  margin: 0 0 1.25rem;
  input,
  textarea,
  select,
  input[type="checkbox"] + label,
  input[type="radio"] + label,
  input[type="file"] + label,
  label.button {
    margin: 0;
  }
}

.fieldset {
  margin: 0 0 1.25rem;
  padding: 0.25rem 0.75rem 1rem;
  border: 1px solid $neutral-500;
  background: $white;
  border-radius: 0.25rem;
  legend {
    margin: -1rem 0 0.75rem -0.25rem;
    padding: 0 0.25rem;
    display: table;
    background: $white;
    background-color: inherit;
  }
  *:last-child { margin-bottom: 0rem; }
}

// legend fix for fieldset element
fieldset.fieldset legend {
  display: initial;
  margin: 0 0 0.25rem -0.25rem;
}

// ------------------------- Error, Warning, and Help messaging ------------------------- //

.error-message,
.warning-message,
.help-message {
  display: flex;
  align-items: flex-start;
  font-size: 0.875rem;
  min-height: 0.0001rem; // hack to avoid collapse in safari
  white-space: pre-wrap;
  transition: all 0.3s ease-out;
  svg {
    width: 1rem;
    height: 1rem;
    margin: 0.125rem 0.25rem 0 0;
  }
  &.large {
    font-size: 1rem;
    svg {
      width: 1.375rem;
      height: 1.375rem;
      margin: 0 0.25rem 0 0;
    }
  }
}

.error-message {
  color: $neg-500;
  fill: $neg-500;
}
.warning-message {
  color: $black;
  fill: $alert-300;
}

// remove bottom margin with input messaging

// example structure:
//
// <label>label</label>
// <input class="invalid">
// <p class="error-message">I am error</p>

input,
textarea,
select,
input[type="file"] + label,
label.button,
.input,
.inline-input,
.inline-button {
  & + .error-message,
  & + .warning-message,
  & + .help-message {
    margin: -1.25rem 0 1.25rem;
  }
}

input[type="checkbox"] + label,
input[type="radio"] + label {
  & + .error-message,
  & + .warning-message,
  & + .help-message {
    margin: -0.75rem 0 1.25rem;
  }
}

label,
legend {
  &.required:after {
    content: "*";
    color: $neg;
  }
}

// ------------------------- multiple inline input support ------------------------- //

// structure:
// <div class="inline-input">
//   <div>label & input (optional help/error message)</div>
//   <div>label & input (optional help/error message)</div>
//   <div>label & input (optional help/error message)</div>
// <div>

// OR

// <label>label</label>
// <div class="inline-input">
//   <input>
//   <input>
//   <input>
// <div>
// <div class="help-message">help/error message</div>

// NOTE: <div>s in structure above can be replaced with any container element

.inline-input {
  // remain inline at smaller sizes (also useful for fix/max-width inputs)
  display: flex;
  justify-content: flex-start;
  margin: 0;
  > *,
  > input {
    flex: 0 1 auto;
    margin-right: 0.75rem;
    &:last-child { margin-right: 0; }
  }
  // full width block at smaller sizes
  &.full {
    display: block;
    > *,
    > input { margin-right: 0; }
    @media #{$screen-width-medium} {
      display: flex;
      > *,
      > input {
        flex: 1 1 100%;
        margin-right: 0.75rem;
        &:last-child { margin-right: 0; }
      }
    }
  }

  label {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
}

// ------------------------- inline input + button ------------------------- //

// structure:
// <label>label</label>
// <div class="inline-button">
//   <input>
//   <button>
// <div>
// <div class="help-message">help/error message</div>

// NOTE: <div>s in structure above can be replaced with any container element

.inline-button {
  display: flex;
  justify-content: flex-start;
  align-items: center;
  margin: 0 0 1.25rem;
  input,
  select {
    flex: 1 1 auto;
    margin: 0;
  }
  #{$buttons} {
    flex: 1 0 auto;
    padding: 0.25rem 0.75rem;
    line-height: 1rem;
    height: 2rem;
    border-radius: 0 0.25rem 0.25rem 0;
    &.outline { margin: 0 0 0 -1px; }
    &:not(.outline){ border-left: none; }
    &.flat {
      padding: 0.25rem 0.75rem;
      border-radius: 0 0.25rem 0.25rem 0;
    }
    &.large, &.flat.large { padding: 0 1rem; }
  }
}

// ------------------------- Radio and Checkbox Patterns ------------------------- //

#{$check-inputs} {
  + label {
    .description {
      line-height: 1.375rem;
      font-weight: normal;
      display: block;
      margin-top: 0.75rem;
      color: $neutral-700;
      &::before { display: none; }
    }
  }
  &.padded,
  &.border {
    + label {
      display: block;
      padding: 0.75rem 0.75rem 0.75rem 2.75rem;
      margin: 0 0 0.75rem;
      border: 1px solid transparent;
    }
    &:focus + label,
    &.focus + label {
      box-shadow: 0 0 0 0.125rem $white, 0 0 0 0.25rem $bg-100;
    }
    & + label:before { // outer circle/
      top: .75rem;
      left: .75rem;
    }

    & + label:after { // inner circle w/ no interaction
      top: 1.375rem;
      left: 1.375rem;
    }
    &:focus + label:after,
    &.focus + label:after,
    &:checked + label:after,
    &.checked + label:after { // inner circle when checked
      top: 1rem;
      left: 1rem;
    }
  }
  &.border {
    + label {
      border-radius: 0.25rem;
      border: 1px solid $neutral-100;
      background-color: $white;
      @media (hover: hover) {
        &:hover, &.hover {
          background-color: $bg-50;
          border-color: $bg-50;
        }
      }
    }

    &:focus + label,
    &.focus + label,
    &:checked + label,
    &.checked + label {
      background-color: $bg-50;
      border: 1px solid $bg-50;
    }

    &:focus + label:before,
    &.focus + label:before {
      box-shadow: none;
    }
  }
}

// ------------------------- Vue Form Validation Patterns ------------------------- //
.vf-form-submitted {
  #{$text-inputs} { &.vf-invalid { border-color: $neg-500;} }
  #{$check-inputs} { &.vf-invalid + label:before { border-color: $neg-500; } }
}

// invalid/error handling for text-inputs
// (vf-touched.vf-invalid for vue-form validator)
#{$text-inputs} {
  &.invalid,
  &.vf-touched.vf-invalid {
    border-color: $neg-500;
    outline: none;
    box-shadow: none;
    // added due to vf-touched.vf-invalid specificity
    &:focus, &.focus, &:active, &.active {
      border-color: $primary-500;
      outline: none;
    }
  }
}

// invalid/error handling for check-inputs
#{$check-inputs} {
  &.invalid,
  &.vf-touched.vf-invalid {
    + label:before { border-color: $neg-500; }
  }
}

// invalid/error handling for input class components
.input {
  &.invalid input,
  &.vf-touched.vf-invalid input {
    border-color: $neg-500;
    &:focus, &:active { border-color: $primary-500; }
  }
}

// invalid/error handling for fieldset
.fieldset {
  &.invalid,
  &.vf-touched.vf-invalid {
    border-color: $neg-500;
  }
}
